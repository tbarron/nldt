---------------------------------------------------------------------------
2018-03-11 10:54:41    better organization

I need a complete design document to resolve all the discrepancies I'm
running into. I want README.md to start at the top and work down. I need
another document that starts with the most fundamental functionality and
builds up from there.

---------------------------------------------------------------------------
2018-03-08 11:48:13    Parsing natlang time expressions

If the user says 'next monday', presumably they're interested in next
Monday in the local timezone. So the parser needs to compute next Monday
based on the local timezone, not utc.

However, at the moment, 'nldt next monday' is getting an empty response.
'nldt tomorrow' gets an ISO date, which is what I want. 'nldt next monday'
should write the date of next Monday in ISO format to stdout.

---------------------------------------------------------------------------
2018-03-02 11:52:53    Don't put 'class' first in docstring

It seems that if a function's docstring begins with the word 'class',
subsequent emacs python-mode indentation in the file is messed up. It's
good to document the name of the class for reference, but it needs to be
later in the docstring, not right at the beginning.

---------------------------------------------------------------------------
2018-02-27 06:12:05    Rules

  * When a moment is initialized, should the input time be interpreted as
    UTC or local if no timezone spec is provided?

      * Ordinarily, people think in terms of local time, so it might be
        convenient to interpret them that way.

      * However, epoch times are always considered UTC, so interpreting
        them in the UTC context would be consistent with the way epoch
        times are handled.

      * A lot of the tests have input times that need to be interpreted in
        UTC, so that's a reason for wanting UTC as the default

      * A possible solution would be to provide the user a call that will
        set the default timezone context.

  * Does a week begin on Sunday or Monday?

      * In a time.struct_time(), tm_wday == 0 indicates Monday

      * With date +%u, Monday = 1, Sunday = 7

      * With date +%w, Sunday = 0, Monday = 1, Saturday = 6


---------------------------------------------------------------------------
2018-02-26 08:00:23    Broken timezones

  * Some of the timezone checks are failing on Travis. This appears to be
    because of the way I'm building the string I put in the environment
    before calling time.tzset(). For example, the offset info for zone
    Antarctica/Palmer is

        Antarctica/Palmer            -03     -10800     -03     -10800

    However, in the context "with nldt.timezone('Antarctica/Palmer'):",
    time.timezone has the value -118800, which is 33 hours. Note that the
    environment string built for this zone will be

        '-03' + '3' + '-03' + '3' => '-033-033'

    Instead, it should be "XXX3XXX3".

  * Let's add a test function in test_nldt.py that walks through all the
    timezones, calls 'with nldt.timezone()' on each, and verifies a time
    conversion based on the pytz.utcoffset() for the given zone and time.

  * I think maybe what I need to do is work away from the time module and
    base nldt on pytz and datetime instead. Let's work in that direction
    and see how it goes.

  * Should an epoch time ever be adjusted for timezone or dst? One way of
    looking at it is that an epoch time is a count of seconds since the
    epoch *as defined in UTC*. From this point of view, an epoch time is
    what it is in all timezones and it always represents the same moment in
    time, regardless of timezone.

    So if a moment is initialized from a given epoch value, that's the UTC
    value no matter what the timezone is.


---------------------------------------------------------------------------
2018-02-02 14:01:10: Rules

  * Remember the layer cake (the "layer cake" rule)

    We're building a layer cake here. The bottom layer consists of all the
    python goodies we use to support everything else -- time, pytz,
    datetime, calendar.timegm, etc.

    The next layer up is the helper functions and modules I've built --
    dst(), hhmm(), word_before(), research(), class week, month,
    time_units.

    The next layer is the moment and duration classes. This is the heart of
    the package.

    On top of the moment and duration functionality is the natural language
    parsing.

    Finally, the top-most layer is the command line user interface that
    lets a user type something like "the first week in December" and get
    back "2018-12-03".

    The important thing about all this is that a lower level should NEVER
    depend on a higher level. The code needs to be designed so that higher
    levels depend on lower levels and never the other way around.

  * Don't reinvent the wheel.

    If python provides a piece of functionality, I'd rather use that than
    write it for myself.

  * On the other hand, don't settle.

    If the functionality python provides doesn't work quite the way I want
    it to, either figure out why it makes more sense the way python does
    it, or write my own that does it the way I expect.

  * The moment class stores a UTC point in time. Calculations should be
    carried out in terms of UTC. Only translate to local time at the last
    minute before displaying the time to the user.


---------------------------------------------------------------------------
2018-02-02 08:53:17:

Here's a confusing point:

 * The output for strftime specifier %u is the weekday number with
   mon=1 and sun=7

 * The output for stftime specifier %w is the weekday number with sun=0 and
   sat=6

 * The value of tm_wday in the tm structure returned by time.localtime and
   time.gmtime uses 0 for mon to 6 for sun

 * The storal of the mory is that we should not use %w or %u to generate
   numeric weekday values but should always get them out of a tm structure.
   In fact, it would probably be smart to have the week class provide a
   weekday_index function that takes a moment or epoch time and returns the
   mon=0 based weekday index.

---------------------------------------------------------------------------
I'm thinking about a language parsing strategy that I'd like to use both in
the natural language oracle in the test file and also in the nldt class
itself.

The idea is to start out with the preposition in the phrase if one is
present. Here are some examples of typical time spec phrases:

    fourth of July
    third week from yesterday
    ninth day after tomorrow
    seventh day before the third of the month

The element after the preposition defines an anchor while the element
before the preposition describes an offset from the anchor.

So, in the case 'fourth of July', if we look at the element after 'of', we
can resolve 'July' to the moment '7/1 00:00:00' of the current year. Then,
looking at the element before 'of', 'fourth' resolves to the number 4 and
adding four days to the anchor gives us '7/4 00:00:00'.

Similar logic coupled with a directional strategy based on the preposition
itself can help us in parsing and grokking such expressions.

As exemplified in the last example, these expressions can be recursive. In
'seventh day before the third of the month', the first level of parsing
yields

    ['seventh day', 'before', 'the third of the month']

with 'the third of the month' being the anchor and 'seventh day' being the
offset.

However, the anchor itself is complex and we need to apply the algorithm
again to resolve it to

    ['the third', 'of', 'the month']

The base anchor is 'the month', which resolves (currently) to '2017.0401
00:00:00'. The offset, 'the third', applied to this anchor, produces
'2017.0403 00:00:00'.

Taking this result as the anchor to the top level expression, we now count
backward (based on the top level preposition, 'before') from the new anchor
to '2017.0327 00:00:00'.
